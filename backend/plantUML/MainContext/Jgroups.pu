@startuml

title < MainContext -> clusterNodeNotificationService ( bean ) >

' NotificationService ( interface )
ClusterCommunicationType *-- NotificationService : use
ClusterNodeNotificationListener  *-- NotificationService : use


' clusterNodeNotificationService bean
NotificationService <|-- ClusterNodeNotificationService
JChannelExt *-- clusterNodeNotificationService : use
ClusterReceiverAdapter <|-- clusterNodeNotificationService 
ClusterChannelListener <|-- clusterNodeNotificationService 
org.apache.commons.lang3.StringUtils *-- clusterNodeNotificationService : use
org.jgroups.Address *-- clusterNodeNotificationService : use
org.jgroups.util.Util *-- clusterNodeNotificationService : use

' JChannelExt
org.jgroups.JChannel <|-- JChannelExt
org.jgroups.conf.ProtocolStackConfigurator *-- JChannelExt : use
JChannelBuilder *-- JChannelExt  : use

' JChannelBuilder
org.jgroups.ChannelListener *-- JChannelBuilder : use
org.jgroups.Receiver *-- JChannelBuilder : use
ClusterCommunicationType *-- JChannelBuilder : use
org.apache.commons.lang3.StringUtils *-- JChannelBuilder : use
org.jgroups.stack.Protocol *-- JChannelBuilder : use
org.jgroups.protocols.TP *-- JChannelBuilder : use
org.jgroups.util.DefaultThreadFactory *-- JChannelBuilder : use
org.jgroups.util.ThreadFactory *-- JChannelBuilder : use
org.jgroups.conf.ConfiguratorFactory *-- JChannelBuilder : use
org.jgroups.conf.ProtocolConfiguration *-- JChannelBuilder : use

' ClusterReceiverAdapter
org.jgroups.ReceiverAdapter <|-- ClusterReceiverAdapter
NotificationService <|-- ClusterReceiverAdapter
lombok.NonNull *-- ClusterReceiverAdapter
org.jgroups.Address *-- ClusterReceiverAdapter
org.jgroups.Message *-- ClusterReceiverAdapter
org.jgroups.JChannel *-- ClusterReceiverAdapter
org.jgroups.View *-- ClusterReceiverAdapter

' ClusterChannelListener
org.jgroups.ChannelListener <|-- ClusterChannelListener
org.jgroups.JChannel *-- ClusterChannelListener

' **************
' *** Source ***
' **************

class ClusterChannelListener{
    @NonNull
    private NotificationService notificationService;
}

class ClusterReceiverAdapter {
    @NonNull
    private final NotificationService notificationService;
    private final List<Address> members = new ArrayList<Address>();
    synchronized Address;
}

class ClusterNodeNotificationService {
    rivate static final String CLUSTER_NODE_NAME = "ADMIN_ClusterNode";
    private static final String DEFAULT_MULTICAST_ADDR = "localhost"; 
    private static final String DEFAULT_MULTICAST_PORT = "45567";
    private final Receiver receiverAdapter = new ClusterReceiverAdapter(this);
    private final ChannelListener channelListener = new ClusterChannelListener(this);
    private JChannelExt channel;
    private String multicastAddress;
    private String multicastPort;
    private String bindAddress;
    private String bindPort;
    private String initialHosts;
    private List<ClusterNodeNotificationListener> notificationListeners = new ArrayList<ClusterNodeNotificationListener>();
    private ClusterCommunicationType clusterCommType;
}

class JChannelBuilder

class JChannelExt {
    
}

interface ClusterNodeNotificationListener

enum ClusterCommunicationType {
    UDP("UDP"), TCP("TCP");
}

interface NotificationService {
    public static final ClusterCommunicationType DEFAULT_TYPE = ClusterCommunicationType.UDP;
    public void start() throws Exception;
    public void shutdown();
    public boolean isCoordinator();
    public int getMemberCount();
    public void addClusterNodeNotificationListener(ClusterNodeNotificationListener var1);
    public void removeClusterNodeNotificationListener(ClusterNodeNotificationListener var1);
    public boolean isActive();
    public List<Address> getMembership();
    public String getClusterNodeName();
    public void sendNotification(Serializable var1);
    public void setMulticastAddress(String var1);
    public void setMulticastPort(String var1);
    public void setBindAddress(String var1);
    public void setBindPort(String var1);
    public void setInitialHosts(String var1);
    public void setClusterCommType(ClusterCommunicationType var1);
    public String getMulticastAddress();
    public String getMulticastPort();
    public String getBindAddress();
    public String getBindPort();
    public String getInitialHosts();
    public ClusterCommunicationType getClusterCommType();
    public void handleNotification(Serializable var1);
}



@enduml